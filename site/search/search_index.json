{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lista de Prestadores - Residencial Duas Marias","title":"Lista de Prestadores - Residencial Duas Marias"},{"location":"#lista-de-prestadores-residencial-duas-marias","text":"","title":"Lista de Prestadores - Residencial Duas Marias"},{"location":"about/","text":"Lista de Prestadores - Residencial Duas Marias Encanador Jo\u00e3o - (11) 99999-9999 Maria - (19) 88888-8888 Jose - (19) 77777-7777 Eletricista Caio - (11) 55555-5555 Marta - (15) 44444-4444","title":"Lista de Prestadores - Residencial Duas Marias"},{"location":"about/#lista-de-prestadores-residencial-duas-marias","text":"","title":"Lista de Prestadores - Residencial Duas Marias"},{"location":"about/#encanador","text":"Jo\u00e3o - (11) 99999-9999 Maria - (19) 88888-8888 Jose - (19) 77777-7777","title":"Encanador"},{"location":"about/#eletricista","text":"Caio - (11) 55555-5555 Marta - (15) 44444-4444","title":"Eletricista"},{"location":"eletricista/","text":"Nome Telefone Caio (11) 55555-5555 Marta (15) 44444-4444","title":"Eletricista"},{"location":"encanador/","text":"Nome Telefone Jo\u00e3o (11) 99999-9999 Maria (19) 88888-8888 Jose (19) 77777-7777","title":"Encanador"},{"location":"jardineiro/","text":"Nome Telefone Pedro (19) 12345-0987 Rafael (21) 98765-4321","title":"Jardineiro"},{"location":"piscineiro/","text":"Nome Telefone email Mauro (11) 22222-2222 mauro@piscina.com Sim\u00e3o (15) 11111-1111","title":"Piscineiro"},{"location":"table/","text":"Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Table"},{"location":"javascripts/","text":"tablesort A small & simple sorting component for tables written in JavaScript. Quick start Download the ZIP of this repository or install via command line: npm install tablesort # Or if you're using Yarn yarn add tablesort <script src='tablesort.min.js'></script> <!-- Include sort types you need --> <script src='tablesort.number.js'></script> <script src='tablesort.date.js'></script> <script> new Tablesort(document.getElementById('table-id')); </script> See usage and demos for more Browser Support 8+ \u2714 3.6+ \u2714 10+ \u2714 11.50+ \u2714 5.1+ \u2714 Node/Browserify // npm install tablesort var tablesort = require('tablesort'); tablesort(el, options); Default CSS Add the styling from tablesort.css file to your CSS or roll with your own. Extending Tablesort If you require a sort operation that does not exist in the sorts directory, you can add your own. Tablesort.extend('name', function(item) { // Regular expression to test against. // `item` is a table value to evaluate. return /foo/.test(item); }, function(a, b) { // Custom sort functionality goes here. // e.g var n = (a > b) ? -1 : 1; return n; }); If you've made an extend function that others would benefit from pull requests are gladly accepted! Contributing Tablesort relies on Grunt as its build tool. Simply run npm run build to package code from any contributions you make to src/tablesort.js before submitting pull requests. Tests are run via: npm install && npm test Licence MIT Bugs? Create an issue","title":"Index"},{"location":"javascripts/#tablesort","text":"A small & simple sorting component for tables written in JavaScript.","title":"tablesort"},{"location":"javascripts/#quick-start","text":"Download the ZIP of this repository or install via command line: npm install tablesort # Or if you're using Yarn yarn add tablesort <script src='tablesort.min.js'></script> <!-- Include sort types you need --> <script src='tablesort.number.js'></script> <script src='tablesort.date.js'></script> <script> new Tablesort(document.getElementById('table-id')); </script> See usage and demos for more","title":"Quick start"},{"location":"javascripts/#browser-support","text":"8+ \u2714 3.6+ \u2714 10+ \u2714 11.50+ \u2714 5.1+ \u2714","title":"Browser Support"},{"location":"javascripts/#nodebrowserify","text":"// npm install tablesort var tablesort = require('tablesort'); tablesort(el, options);","title":"Node/Browserify"},{"location":"javascripts/#default-css","text":"Add the styling from tablesort.css file to your CSS or roll with your own.","title":"Default CSS"},{"location":"javascripts/#extending-tablesort","text":"If you require a sort operation that does not exist in the sorts directory, you can add your own. Tablesort.extend('name', function(item) { // Regular expression to test against. // `item` is a table value to evaluate. return /foo/.test(item); }, function(a, b) { // Custom sort functionality goes here. // e.g var n = (a > b) ? -1 : 1; return n; }); If you've made an extend function that others would benefit from pull requests are gladly accepted!","title":"Extending Tablesort"},{"location":"javascripts/#contributing","text":"Tablesort relies on Grunt as its build tool. Simply run npm run build to package code from any contributions you make to src/tablesort.js before submitting pull requests. Tests are run via: npm install && npm test","title":"Contributing"},{"location":"javascripts/#licence","text":"MIT","title":"Licence"},{"location":"javascripts/#bugs","text":"Create an issue","title":"Bugs?"},{"location":"javascripts/demo/","text":"Quick start {% highlight html %} new Tablesort(document.getElementById('table-id')); {% endhighlight %} Sort types See all available sort types in the sort directory of the project . Defaults to string if no sort types are provided. Additional options Ascending/Descending You can pass an alternate sort order as a second parameter. By default sort is ascending. To change this, set: {% highlight js %}new Tablesort(document.getElementById('table-id'), { descending: true }); **Note:** If you are using the default CSS provided you'll need to reverse the class names that style the arrows. Exclude columns or rows For columns or rows that do not require sorting, you can add attribute data-sort-method='none' to a columns th or a tr element. {% highlight html %} Name 1 Gonzo the Great 12-2-70 Radishes $0.63 {% endhighlight %} Override data that is sorted on Sometimes text inside cells is not normalized. Using a data-sort attribute you can use optional data to sort on. {% highlight html %} 1 01/08/13 @ 8:47:18am EST 2 3/7/2004 @ 9:24:45 EST {% endhighlight %} You can use a custom attribute (instead of data-sort ) using the sortAttribute option: {% highlight js %} var table = document.getElementById('table-id'); var sort = new Tablesort(table, { sortAttribute: 'data-custom-sort-val'}); Specify the sort method for a column By adding a data-sort-method attribute to a table heading you can force Tablesort to use a specific sorting method rather than guessing it. The value of data-sort-method corresponds to the name of a sort function. {% highlight html %} Number Version 1 3.7.2004 2 1.08.2013 Specify which table heading row enables sorting If you have two or more table heading rows you can specify the one that enables sorting by adding a data-sort-method='thead' attribute to desired <tr> element. {% highlight html %} Sort Row Not Sort Row 2 1 3 Events Tablesort supports two custom events beforeSort & afterSort . {% highlight js %}var table = document.getElementById('table-id'); var sort = new Tablesort(table); table.addEventListener('beforeSort', function() { alert('Table is about to be sorted!'); }); table.addEventListener('afterSort', function() { alert('Table sorted!'); }); Name Born Roy Eldridge 1911 Tim Hagans 1954 Freddie Hubbard 1938 Refresh sort on appended data Tablesort supports sorting when new data has been added. Simply call the refresh method. {% highlight js %}var table = document.getElementById('table-id'); var sort = new Tablesort(table); // Make some Ajax request to fetch new data and on success: sort.refresh(); Name Born Roy Eldridge 1911 Tim Hagans 1954 Freddie Hubbard 1938 Append a row Remove a row Default sort on tablesort initialization It is possible to automatically sort the table once you create a Tablesort instance by adding data-sort-default attribute. {% highlight html %} Born Name Born Roy Eldridge 1911 Tim Hagans 1954 Freddie Hubbard 1938 Sorting by column keys Sometimes, tables can have more complex column structures, especially when using colspans. In these cases, you can explicitly connect a header to the cells in each row that it should sort by, by using the data-sort-column-key attribute. This example sorts products by price, even though the prices are not in the same column as their header. {% highlight html %} Product Price Apples Sale! 20 Bread Out of stock 10 Radishes In Stock! 30 Product Price Apples Sale! 20 Bread Out of stock 10 Radishes In Stock! 30 CSS styling Add the styling from tablesort.css file to your CSS or roll with your own. Licence MIT Bugs? File Them new Tablesort(document.getElementById('defaulting')); new Tablesort(document.getElementById('column-keys')); var events = document.getElementById('event-table') new Tablesort(events); addEvent(events, 'beforeSort', function(e) { alert('Table is about to be sorted!'); }); addEvent(events, 'afterSort', function(e) { alert('Table sorted!'); }); var trumpeters = [ { \"name\": \"Miles Davis\", \"born\": 1926 }, { \"name\": \"Dizzy Gillespie\", \"born\": 1917 }, { \"name\": \"Wynton Marsalis\", \"born\": 1961 }, { \"name\": \"Tom Harell\", \"born\": 1946 }, { \"name\": \"Roy Hargrove\", \"born\": 1969 }, { \"name\": \"Chet Baker\", \"born\": 1929 }, { \"name\": \"Nicholas Payton\", \"born\": 1973 }, { \"name\": \"Wallace Roney\", \"born\": 1960 }, { \"name\": \"Rex Stewart\", \"born\": 1907 }, { \"name\": \"Tim Hagans\", \"born\": 1954 }, { \"name\": \"Roy Eldridge\", \"born\": 1911 }, { \"name\": \"Freddie Hubbard\", \"born\": 1938 } ] var r = document.getElementById('refresh-table'); var add = document.getElementById('add'); var remove = document.getElementById('remove'); var refresh = new Tablesort(r); function cancel(event) { (event.preventDefault) ? event.preventDefault() : event.returnValue = false; (event.stopPropagation) ? event.stopPropagation() : event.cancelBubble = true; } function addEvent(object, event, method) { if (object.attachEvent) { object['e' + event + method] = method; object[event + method] = function(){object['e' + event + method](window.event);}; object.attachEvent('on' + event, object[event + method]); } else { object.addEventListener(event, method, false); } }; addEvent(add, 'click', function(e) { cancel(e); var player = trumpeters[Math.floor(Math.random() * trumpeters.length)]; var rowCount = r.rows.length; var row = r.insertRow(rowCount); var cellName = row.insertCell(0); cellName.innerHTML = player.name; var cellBorn = row.insertCell(1); cellBorn.innerHTML = player.born; refresh.refresh(); }); addEvent(remove, 'click', function(e) { cancel(e); var rowCount = r.rows.length; if (rowCount === 2) return; r.deleteRow(rowCount - 1); });","title":"Index"},{"location":"javascripts/demo/#quick-start","text":"{% highlight html %} new Tablesort(document.getElementById('table-id')); {% endhighlight %}","title":"Quick start"},{"location":"javascripts/demo/#sort-types","text":"See all available sort types in the sort directory of the project . Defaults to string if no sort types are provided.","title":"Sort types"},{"location":"javascripts/demo/#additional-options","text":"","title":"Additional options"},{"location":"javascripts/demo/#ascendingdescending","text":"You can pass an alternate sort order as a second parameter. By default sort is ascending. To change this, set: {% highlight js %}new Tablesort(document.getElementById('table-id'), { descending: true }); **Note:** If you are using the default CSS provided you'll need to reverse the class names that style the arrows.","title":"Ascending/Descending"},{"location":"javascripts/demo/#exclude-columns-or-rows","text":"For columns or rows that do not require sorting, you can add attribute data-sort-method='none' to a columns th or a tr element. {% highlight html %} Name 1 Gonzo the Great 12-2-70 Radishes $0.63 {% endhighlight %}","title":"Exclude columns or rows"},{"location":"javascripts/demo/#override-data-that-is-sorted-on","text":"Sometimes text inside cells is not normalized. Using a data-sort attribute you can use optional data to sort on. {% highlight html %} 1 01/08/13 @ 8:47:18am EST 2 3/7/2004 @ 9:24:45 EST {% endhighlight %} You can use a custom attribute (instead of data-sort ) using the sortAttribute option: {% highlight js %} var table = document.getElementById('table-id'); var sort = new Tablesort(table, { sortAttribute: 'data-custom-sort-val'});","title":"Override data that is sorted on"},{"location":"javascripts/demo/#specify-the-sort-method-for-a-column","text":"By adding a data-sort-method attribute to a table heading you can force Tablesort to use a specific sorting method rather than guessing it. The value of data-sort-method corresponds to the name of a sort function. {% highlight html %} Number Version 1 3.7.2004 2 1.08.2013","title":"Specify the sort method for a column"},{"location":"javascripts/demo/#specify-which-table-heading-row-enables-sorting","text":"If you have two or more table heading rows you can specify the one that enables sorting by adding a data-sort-method='thead' attribute to desired <tr> element. {% highlight html %} Sort Row Not Sort Row 2 1 3","title":"Specify which table heading row enables sorting"},{"location":"javascripts/demo/#events","text":"Tablesort supports two custom events beforeSort & afterSort . {% highlight js %}var table = document.getElementById('table-id'); var sort = new Tablesort(table); table.addEventListener('beforeSort', function() { alert('Table is about to be sorted!'); }); table.addEventListener('afterSort', function() { alert('Table sorted!'); }); Name Born Roy Eldridge 1911 Tim Hagans 1954 Freddie Hubbard 1938","title":"Events"},{"location":"javascripts/demo/#refresh-sort-on-appended-data","text":"Tablesort supports sorting when new data has been added. Simply call the refresh method. {% highlight js %}var table = document.getElementById('table-id'); var sort = new Tablesort(table); // Make some Ajax request to fetch new data and on success: sort.refresh(); Name Born Roy Eldridge 1911 Tim Hagans 1954 Freddie Hubbard 1938 Append a row Remove a row","title":"Refresh sort on appended data"},{"location":"javascripts/demo/#default-sort-on-tablesort-initialization","text":"It is possible to automatically sort the table once you create a Tablesort instance by adding data-sort-default attribute. {% highlight html %} Born Name Born Roy Eldridge 1911 Tim Hagans 1954 Freddie Hubbard 1938","title":"Default sort on tablesort initialization"},{"location":"javascripts/demo/#sorting-by-column-keys","text":"Sometimes, tables can have more complex column structures, especially when using colspans. In these cases, you can explicitly connect a header to the cells in each row that it should sort by, by using the data-sort-column-key attribute. This example sorts products by price, even though the prices are not in the same column as their header. {% highlight html %} Product Price Apples Sale! 20 Bread Out of stock 10 Radishes In Stock! 30 Product Price Apples Sale! 20 Bread Out of stock 10 Radishes In Stock! 30","title":"Sorting by column keys"},{"location":"javascripts/demo/#css-styling","text":"Add the styling from tablesort.css file to your CSS or roll with your own.","title":"CSS styling"},{"location":"javascripts/demo/#licence","text":"MIT","title":"Licence"},{"location":"javascripts/demo/#bugs","text":"File Them new Tablesort(document.getElementById('defaulting')); new Tablesort(document.getElementById('column-keys')); var events = document.getElementById('event-table') new Tablesort(events); addEvent(events, 'beforeSort', function(e) { alert('Table is about to be sorted!'); }); addEvent(events, 'afterSort', function(e) { alert('Table sorted!'); }); var trumpeters = [ { \"name\": \"Miles Davis\", \"born\": 1926 }, { \"name\": \"Dizzy Gillespie\", \"born\": 1917 }, { \"name\": \"Wynton Marsalis\", \"born\": 1961 }, { \"name\": \"Tom Harell\", \"born\": 1946 }, { \"name\": \"Roy Hargrove\", \"born\": 1969 }, { \"name\": \"Chet Baker\", \"born\": 1929 }, { \"name\": \"Nicholas Payton\", \"born\": 1973 }, { \"name\": \"Wallace Roney\", \"born\": 1960 }, { \"name\": \"Rex Stewart\", \"born\": 1907 }, { \"name\": \"Tim Hagans\", \"born\": 1954 }, { \"name\": \"Roy Eldridge\", \"born\": 1911 }, { \"name\": \"Freddie Hubbard\", \"born\": 1938 } ] var r = document.getElementById('refresh-table'); var add = document.getElementById('add'); var remove = document.getElementById('remove'); var refresh = new Tablesort(r); function cancel(event) { (event.preventDefault) ? event.preventDefault() : event.returnValue = false; (event.stopPropagation) ? event.stopPropagation() : event.cancelBubble = true; } function addEvent(object, event, method) { if (object.attachEvent) { object['e' + event + method] = method; object[event + method] = function(){object['e' + event + method](window.event);}; object.attachEvent('on' + event, object[event + method]); } else { object.addEventListener(event, method, false); } }; addEvent(add, 'click', function(e) { cancel(e); var player = trumpeters[Math.floor(Math.random() * trumpeters.length)]; var rowCount = r.rows.length; var row = r.insertRow(rowCount); var cellName = row.insertCell(0); cellName.innerHTML = player.name; var cellBorn = row.insertCell(1); cellBorn.innerHTML = player.born; refresh.refresh(); }); addEvent(remove, 'click', function(e) { cancel(e); var rowCount = r.rows.length; if (rowCount === 2) return; r.deleteRow(rowCount - 1); });","title":"Bugs?"}]}